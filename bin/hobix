#!/usr/bin/env ruby
require 'hobix/commandline'

cmdline = Class.new
cmdline.extend Hobix::CommandLine

def print_usage( cmdline )
    puts "hobix #{ Hobix::VERSION } on ruby #{ ::RUBY_VERSION } (#{ ::RUBY_RELEASE_DATE }) [#{ ::RUBY_PLATFORM }]"
    puts "Usage: hobix command weblog-name [command-options]"
    puts "Commands are"
    ['weblog', 'action'].each do |cmd_type|
        cmdline.methods.collect do |m|
            if m =~ /^(\w+)_(#{ cmd_type })$/
                [$1, $&]
            end
        end.compact.sort.each do |cmd, m|
            args = "#{ cmd } #{ cmdline.method( "#{ m }_args" ).call.join( ' ' ) }"
            exp = cmdline.method( "#{ m }_explain" ).call.gsub( /\n/, "\n" + ( " " * 40 ) )
            puts "  %-38s%-40s" % [args, exp]
        end
        puts
    end
    exit
end

print_usage( cmdline ) if ARGV.length < 1 or ARGV[0] == 'help'

# unfreeze the arguments
cmd, *opts = ARGV.collect do |arg|
    arg.dup
end
ARGV.clear
         
cmdline.login

if cmd == 'setup_blogs'
    cmdline.setup_blogs
elsif cmdline.respond_to? "#{ cmd }_weblog"
    cmdline.method( "#{ cmd }_weblog" ).call( *opts )
elsif cmdline.respond_to? "#{ cmd }_action"
    weblog = opts.shift
    unless cmdline.config['weblogs'].respond_to? :has_key?
        puts "*** no weblogs found in your configuration."
        puts "*** use `hobix create' or `hobix add' to setup."
        exit
    end
    unless cmdline.config['weblogs'].has_key? weblog
        puts "*** no weblog `#{ weblog }' found in your configuration."
        puts "*** type `hobix help' and check your spelling."
        exit
    end
    hobix_weblog = Hobix::Weblog.load( cmdline.config['weblogs'][ weblog ] )
    cmdline.method( "#{ cmd }_action" ).call( hobix_weblog, *opts )
else
    puts "*** no hobix command `#{ cmd }'. use `hobix' without arguments to get help."
end

